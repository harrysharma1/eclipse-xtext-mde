/**
 * generated by Xtext 2.37.0
 */
package harrysharma.brainrot.brainrot.impl;

import harrysharma.brainrot.brainrot.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BrainrotFactoryImpl extends EFactoryImpl implements BrainrotFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BrainrotFactory init()
  {
    try
    {
      BrainrotFactory theBrainrotFactory = (BrainrotFactory)EPackage.Registry.INSTANCE.getEFactory(BrainrotPackage.eNS_URI);
      if (theBrainrotFactory != null)
      {
        return theBrainrotFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BrainrotFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrainrotFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BrainrotPackage.MODEL: return createModel();
      case BrainrotPackage.SKIBIDI: return createSkibidi();
      case BrainrotPackage.SIGMA: return createSigma();
      case BrainrotPackage.RIZZLER: return createRizzler();
      case BrainrotPackage.TOILET: return createToilet();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Skibidi createSkibidi()
  {
    SkibidiImpl skibidi = new SkibidiImpl();
    return skibidi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sigma createSigma()
  {
    SigmaImpl sigma = new SigmaImpl();
    return sigma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rizzler createRizzler()
  {
    RizzlerImpl rizzler = new RizzlerImpl();
    return rizzler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Toilet createToilet()
  {
    ToiletImpl toilet = new ToiletImpl();
    return toilet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrainrotPackage getBrainrotPackage()
  {
    return (BrainrotPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BrainrotPackage getPackage()
  {
    return BrainrotPackage.eINSTANCE;
  }

} //BrainrotFactoryImpl
