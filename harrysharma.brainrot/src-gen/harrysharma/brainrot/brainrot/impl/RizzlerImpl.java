/**
 * generated by Xtext 2.37.0
 */
package harrysharma.brainrot.brainrot.impl;

import harrysharma.brainrot.brainrot.BrainrotPackage;
import harrysharma.brainrot.brainrot.Rizzler;
import harrysharma.brainrot.brainrot.Toilet;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rizzler</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link harrysharma.brainrot.brainrot.impl.RizzlerImpl#getSuperType <em>Super Type</em>}</li>
 *   <li>{@link harrysharma.brainrot.brainrot.impl.RizzlerImpl#getToilets <em>Toilets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RizzlerImpl extends SkibidiImpl implements Rizzler
{
  /**
   * The cached value of the '{@link #getSuperType() <em>Super Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected Rizzler superType;

  /**
   * The cached value of the '{@link #getToilets() <em>Toilets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToilets()
   * @generated
   * @ordered
   */
  protected EList<Toilet> toilets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RizzlerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrainrotPackage.Literals.RIZZLER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rizzler getSuperType()
  {
    if (superType != null && superType.eIsProxy())
    {
      InternalEObject oldSuperType = (InternalEObject)superType;
      superType = (Rizzler)eResolveProxy(oldSuperType);
      if (superType != oldSuperType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrainrotPackage.RIZZLER__SUPER_TYPE, oldSuperType, superType));
      }
    }
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rizzler basicGetSuperType()
  {
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuperType(Rizzler newSuperType)
  {
    Rizzler oldSuperType = superType;
    superType = newSuperType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrainrotPackage.RIZZLER__SUPER_TYPE, oldSuperType, superType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Toilet> getToilets()
  {
    if (toilets == null)
    {
      toilets = new EObjectContainmentEList<Toilet>(Toilet.class, this, BrainrotPackage.RIZZLER__TOILETS);
    }
    return toilets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BrainrotPackage.RIZZLER__TOILETS:
        return ((InternalEList<?>)getToilets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrainrotPackage.RIZZLER__SUPER_TYPE:
        if (resolve) return getSuperType();
        return basicGetSuperType();
      case BrainrotPackage.RIZZLER__TOILETS:
        return getToilets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrainrotPackage.RIZZLER__SUPER_TYPE:
        setSuperType((Rizzler)newValue);
        return;
      case BrainrotPackage.RIZZLER__TOILETS:
        getToilets().clear();
        getToilets().addAll((Collection<? extends Toilet>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrainrotPackage.RIZZLER__SUPER_TYPE:
        setSuperType((Rizzler)null);
        return;
      case BrainrotPackage.RIZZLER__TOILETS:
        getToilets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrainrotPackage.RIZZLER__SUPER_TYPE:
        return superType != null;
      case BrainrotPackage.RIZZLER__TOILETS:
        return toilets != null && !toilets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RizzlerImpl
