/*
 * generated by Xtext 2.37.0
 */
package harrysharma.brainrot.serializer;

import com.google.inject.Inject;
import harrysharma.brainrot.brainrot.BrainrotPackage;
import harrysharma.brainrot.brainrot.Model;
import harrysharma.brainrot.brainrot.Rizzler;
import harrysharma.brainrot.brainrot.Sigma;
import harrysharma.brainrot.brainrot.Toilet;
import harrysharma.brainrot.services.BrainrotGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BrainrotSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BrainrotGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BrainrotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BrainrotPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BrainrotPackage.RIZZLER:
				sequence_Rizzler(context, (Rizzler) semanticObject); 
				return; 
			case BrainrotPackage.SIGMA:
				sequence_Sigma(context, (Sigma) semanticObject); 
				return; 
			case BrainrotPackage.TOILET:
				sequence_Toilet(context, (Toilet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Skibidi+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Skibidi returns Rizzler
	 *     Rizzler returns Rizzler
	 *
	 * Constraint:
	 *     (name=ID superType=[Rizzler|ID]? toilets+=Toilet*)
	 * </pre>
	 */
	protected void sequence_Rizzler(ISerializationContext context, Rizzler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Skibidi returns Sigma
	 *     Sigma returns Sigma
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Sigma(ISerializationContext context, Sigma semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrainrotPackage.Literals.SKIBIDI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrainrotPackage.Literals.SKIBIDI__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSigmaAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Toilet returns Toilet
	 *
	 * Constraint:
	 *     (many?='many'? name=ID type=[Skibidi|ID])
	 * </pre>
	 */
	protected void sequence_Toilet(ISerializationContext context, Toilet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
