/*
 * generated by Xtext 2.37.0
 */
package harrysharma.brainrot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BrainrotGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "harrysharma.brainrot.Brainrot.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsSkibidiParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//    (elements+= Skibidi)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(elements+= Skibidi)*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Skibidi
		public RuleCall getElementsSkibidiParserRuleCall_0() { return cElementsSkibidiParserRuleCall_0; }
	}
	public class SkibidiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "harrysharma.brainrot.Brainrot.Skibidi");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSigmaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRizzlerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Skibidi:
		//    Sigma | Rizzler;
		@Override public ParserRule getRule() { return rule; }
		
		//Sigma | Rizzler
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sigma
		public RuleCall getSigmaParserRuleCall_0() { return cSigmaParserRuleCall_0; }
		
		//Rizzler
		public RuleCall getRizzlerParserRuleCall_1() { return cRizzlerParserRuleCall_1; }
	}
	public class SigmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "harrysharma.brainrot.Brainrot.Sigma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRizzKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Sigma:
		//    'rizz' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'rizz' name=ID
		public Group getGroup() { return cGroup; }
		
		//'rizz'
		public Keyword getRizzKeyword_0() { return cRizzKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RizzlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "harrysharma.brainrot.Brainrot.Rizzler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRizzKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeRizzlerCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeRizzlerIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeRizzlerCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToiletsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToiletsToiletParserRuleCall_4_0 = (RuleCall)cToiletsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rizzler:
		//    'rizz' name=ID ('extends' superType=[Rizzler])?'{'
		//    (toilets+=Toilet)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rizz' name=ID ('extends' superType=[Rizzler])?'{'
		//(toilets+=Toilet)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'rizz'
		public Keyword getRizzKeyword_0() { return cRizzKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Rizzler])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Rizzler]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Rizzler]
		public CrossReference getSuperTypeRizzlerCrossReference_2_1_0() { return cSuperTypeRizzlerCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeRizzlerIDTerminalRuleCall_2_1_0_1() { return cSuperTypeRizzlerIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(toilets+=Toilet)*
		public Assignment getToiletsAssignment_4() { return cToiletsAssignment_4; }
		
		//Toilet
		public RuleCall getToiletsToiletParserRuleCall_4_0() { return cToiletsToiletParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ToiletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "harrysharma.brainrot.Brainrot.Toilet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeSkibidiCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeSkibidiIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeSkibidiCrossReference_3_0.eContents().get(1);
		
		//Toilet:
		//    (many?='many')? name=ID ':' type=[Skibidi];
		@Override public ParserRule getRule() { return rule; }
		
		//(many?='many')? name=ID ':' type=[Skibidi]
		public Group getGroup() { return cGroup; }
		
		//(many?='many')?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }
		
		//'many'
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[Skibidi]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Skibidi]
		public CrossReference getTypeSkibidiCrossReference_3_0() { return cTypeSkibidiCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeSkibidiIDTerminalRuleCall_3_0_1() { return cTypeSkibidiIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final SkibidiElements pSkibidi;
	private final SigmaElements pSigma;
	private final RizzlerElements pRizzler;
	private final ToiletElements pToilet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrainrotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSkibidi = new SkibidiElements();
		this.pSigma = new SigmaElements();
		this.pRizzler = new RizzlerElements();
		this.pToilet = new ToiletElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("harrysharma.brainrot.Brainrot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (elements+= Skibidi)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Skibidi:
	//    Sigma | Rizzler;
	public SkibidiElements getSkibidiAccess() {
		return pSkibidi;
	}
	
	public ParserRule getSkibidiRule() {
		return getSkibidiAccess().getRule();
	}
	
	//Sigma:
	//    'rizz' name=ID;
	public SigmaElements getSigmaAccess() {
		return pSigma;
	}
	
	public ParserRule getSigmaRule() {
		return getSigmaAccess().getRule();
	}
	
	//Rizzler:
	//    'rizz' name=ID ('extends' superType=[Rizzler])?'{'
	//    (toilets+=Toilet)*
	//    '}';
	public RizzlerElements getRizzlerAccess() {
		return pRizzler;
	}
	
	public ParserRule getRizzlerRule() {
		return getRizzlerAccess().getRule();
	}
	
	//Toilet:
	//    (many?='many')? name=ID ':' type=[Skibidi];
	public ToiletElements getToiletAccess() {
		return pToilet;
	}
	
	public ParserRule getToiletRule() {
		return getToiletAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
