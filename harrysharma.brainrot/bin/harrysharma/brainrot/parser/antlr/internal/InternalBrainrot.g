/*
 * generated by Xtext 2.37.0
 */
grammar InternalBrainrot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package harrysharma.brainrot.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package harrysharma.brainrot.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import harrysharma.brainrot.services.BrainrotGrammarAccess;

}

@parser::members {

 	private BrainrotGrammarAccess grammarAccess;

    public InternalBrainrotParser(TokenStream input, BrainrotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BrainrotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsSkibidiParserRuleCall_0());
			}
			lv_elements_0_0=ruleSkibidi
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"harrysharma.brainrot.Brainrot.Skibidi");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSkibidi
entryRuleSkibidi returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSkibidiRule()); }
	iv_ruleSkibidi=ruleSkibidi
	{ $current=$iv_ruleSkibidi.current; }
	EOF;

// Rule Skibidi
ruleSkibidi returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSkibidiAccess().getSigmaParserRuleCall_0());
		}
		this_Sigma_0=ruleSigma
		{
			$current = $this_Sigma_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSkibidiAccess().getRizzlerParserRuleCall_1());
		}
		this_Rizzler_1=ruleRizzler
		{
			$current = $this_Rizzler_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSigma
entryRuleSigma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSigmaRule()); }
	iv_ruleSigma=ruleSigma
	{ $current=$iv_ruleSigma.current; }
	EOF;

// Rule Sigma
ruleSigma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rizz'
		{
			newLeafNode(otherlv_0, grammarAccess.getSigmaAccess().getRizzKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSigmaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSigmaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRizzler
entryRuleRizzler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRizzlerRule()); }
	iv_ruleRizzler=ruleRizzler
	{ $current=$iv_ruleRizzler.current; }
	EOF;

// Rule Rizzler
ruleRizzler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rizz'
		{
			newLeafNode(otherlv_0, grammarAccess.getRizzlerAccess().getRizzKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRizzlerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRizzlerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getRizzlerAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRizzlerRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getRizzlerAccess().getSuperTypeRizzlerCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getRizzlerAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRizzlerAccess().getToiletsToiletParserRuleCall_4_0());
				}
				lv_toilets_5_0=ruleToilet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRizzlerRule());
					}
					add(
						$current,
						"toilets",
						lv_toilets_5_0,
						"harrysharma.brainrot.Brainrot.Toilet");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRizzlerAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleToilet
entryRuleToilet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToiletRule()); }
	iv_ruleToilet=ruleToilet
	{ $current=$iv_ruleToilet.current; }
	EOF;

// Rule Toilet
ruleToilet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_many_0_0='many'
				{
					newLeafNode(lv_many_0_0, grammarAccess.getToiletAccess().getManyManyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getToiletRule());
					}
					setWithLastConsumed($current, "many", lv_many_0_0 != null, "many");
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getToiletAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getToiletRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getToiletAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getToiletRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getToiletAccess().getTypeSkibidiCrossReference_3_0());
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
