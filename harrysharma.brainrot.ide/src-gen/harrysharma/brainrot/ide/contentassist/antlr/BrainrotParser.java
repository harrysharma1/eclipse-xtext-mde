/*
 * generated by Xtext 2.37.0
 */
package harrysharma.brainrot.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import harrysharma.brainrot.ide.contentassist.antlr.internal.InternalBrainrotParser;
import harrysharma.brainrot.services.BrainrotGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BrainrotParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BrainrotGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BrainrotGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSkibidiAccess().getAlternatives(), "rule__Skibidi__Alternatives");
			builder.put(grammarAccess.getSigmaAccess().getGroup(), "rule__Sigma__Group__0");
			builder.put(grammarAccess.getRizzlerAccess().getGroup(), "rule__Rizzler__Group__0");
			builder.put(grammarAccess.getRizzlerAccess().getGroup_2(), "rule__Rizzler__Group_2__0");
			builder.put(grammarAccess.getToiletAccess().getGroup(), "rule__Toilet__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getSigmaAccess().getNameAssignment_1(), "rule__Sigma__NameAssignment_1");
			builder.put(grammarAccess.getRizzlerAccess().getNameAssignment_1(), "rule__Rizzler__NameAssignment_1");
			builder.put(grammarAccess.getRizzlerAccess().getSuperTypeAssignment_2_1(), "rule__Rizzler__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getRizzlerAccess().getToiletsAssignment_4(), "rule__Rizzler__ToiletsAssignment_4");
			builder.put(grammarAccess.getToiletAccess().getManyAssignment_0(), "rule__Toilet__ManyAssignment_0");
			builder.put(grammarAccess.getToiletAccess().getNameAssignment_1(), "rule__Toilet__NameAssignment_1");
			builder.put(grammarAccess.getToiletAccess().getTypeAssignment_3(), "rule__Toilet__TypeAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BrainrotGrammarAccess grammarAccess;

	@Override
	protected InternalBrainrotParser createParser() {
		InternalBrainrotParser result = new InternalBrainrotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BrainrotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BrainrotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
